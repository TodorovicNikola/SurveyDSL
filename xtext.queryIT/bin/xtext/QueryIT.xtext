// automatically generated by Xtext
grammar xtext.QueryIT with org.eclipse.xtext.common.Terminals

import "http://www.example.org/queryIT" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Survey returns Survey: 
	(
	(hideNavigationButtons?='hideNavigationButtons')?
	&(hidePageTitles?='hidePageTitles')?
	&(hideQuestionNumbers?='hideQuestionNumbers')?
	&(hidePageNumbers?='hidePageNumbers')?
	&('author(s):' author+=EString ( "," author+=EString)*)?
	&('title:' title=EString)?
	&('timeLimit:' timeLimit=EInt)?
	&('completedMessage:' completedMessage=EString)?
	&('buttonNextText:' pageNextText=EString)?
	&('buttonPrevText:' pagePrevText=EString)?
	&('buttonCompletedText:' completeText=EString)?
	&('questionTitleLocation:' questionTitleLocation=TitleLocation)?
	&('progressBarLocation:' showProgressBar=ProgressBarLocation)?
	)
	pages+=Page (pages+=Page)*
;





EString returns ecore::EString:
	STRING | ID;

Page returns Page:
	'Page'
	(
	('title:' title=EString)?
	&('visibleIf:' visibleIf=EString)?
	)
	questions+=Question (questions+=Question)*
;

EInt returns ecore::EInt:
	'-'? INT;

enum TitleLocation returns TitleLocation:
				top = 'top' | bottom = 'bottom';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum ProgressBarLocation returns ProgressBarLocation:
				top = 'top' | off = 'off' | bottom = 'bottom';

Question returns Question:
	'Question'
		(
		(isRequired?='required')?
		&('type:' type=QuestionType)
		&('title:' title=EString)
		&('rangeStart:' rangeStart=EInt)?
		&('rangeEnd:' rangeEnd=EInt)?
		&('textInputType:' inputType=TextInputType)?
		&('visibleIf:' visibleIf=EString)?
		&('placeholder:' placeholder=EString)?
		&('choices:' choices+=EString ( "," choices+=EString)* )?
		&('colCount:' colCount=EInt)?
		&('questionName:' questionName=EString)?
		&('commentRows:' rows=EInt)?
		&('ratingMinDescription:' mininumRateDescription=EString)?
		&('ratingMaxDescription:' maximumRateDescription=EString)?
		)
		(
		('matrixRows:' matrixRows+=TextValue ( "," matrixRows+=TextValue)* )?
		&('multiTextItems:' multiTextItems+=MultiTextItem (multiTextItems+=MultiTextItem)* )?
		&('matrixColumns:' matrixColumns+=TextValue ( "," matrixColumns+=TextValue)* )?
		)
;

enum QuestionType returns QuestionType:
				text = 'text' | radiogroup = 'radiogroup' | checkbox = 'checkbox' | dropdown = 'dropdown' | comment = 'comment' | matrix = 'matrix' | multipleText = 'multipleText' | rating = 'rating';

enum TextInputType returns TextInputType:
				text = 'text' | time = 'time' | range = 'range' | color = 'color' | date = 'date' | datetime = 'datetime' | email = 'email' | month = 'month' | number = 'number' | password = 'password' | tel = 'tel' | url = 'url' | week = 'week';

TextValue returns TextValue:
		"("
		'text:' text=EString
		('value:' value=EString)?
		")"
;

MultiTextItem returns MultiTextItem:

		'subtitle:' title=EString
;
